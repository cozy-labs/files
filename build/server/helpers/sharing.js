// Generated by CoffeeScript 1.7.1
var CozyAdapter, CozyInstance, File, Folder, NotificationHelper, User, clearance, cozydomain, doSendNotif, e, localization, mailsToSend, notifications, notiftemplate, publicURL, timer, _5min;

clearance = require('cozy-pouchdb-clearance');

NotificationHelper = require('cozy-notifications-helper');

File = require('../models/file');

Folder = require('../models/folder');

CozyInstance = require('../models/cozy_instance');

User = require('../models/user');

localization = require('../lib/localization_manager');

try {
  CozyAdapter = require('americano-cozy-pouchdb/node_modules/jugglingdb-pouchdb-adapter');
} catch (_error) {
  e = _error;
  CozyAdapter = require('jugglingdb-pouchdb-adapter');
}

cozydomain = 'http://your.friends.cozy.url/';

CozyInstance.getURL((function(_this) {
  return function(err, domain) {
    if (err) {
      return console.log(err);
    }
    return cozydomain = domain;
  };
})(this));

notifications = new NotificationHelper('files');

publicURL = function(doc) {
  if (doc instanceof File) {
    return "" + cozydomain + "public/files/files/" + doc.id;
  } else if (doc instanceof Folder) {
    return "" + cozydomain + "public/files/folders/" + doc.id;
  } else {
    throw new Error('wrong usage');
  }
};

module.exports.limitedTree = function(folder, req, perm, callback) {
  if (typeof perm === "function") {
    callback = perm;
    perm = 'r';
  }
  return folder.getParents(function(err, parents) {
    var scan;
    if (err) {
      return callback(err);
    }
    scan = function() {
      var tested;
      tested = parents[0];
      if (!tested) {
        return callback([]);
      }
      return clearance.check(tested, perm, req, function(err, authorized) {
        if (err) {
          return callback([]);
        }
        if (!authorized) {
          parents.shift();
          return scan();
        } else {
          return callback(parents, authorized);
        }
      });
    };
    return scan();
  });
};

module.exports.checkClearance = function(doc, req, perm, callback) {
  var checkAscendantVisible;
  if (typeof perm === "function") {
    callback = perm;
    perm = 'r';
  }
  checkAscendantVisible = function() {
    return module.exports.limitedTree(doc, req, perm, function(results, rule) {
      return callback(results.length !== 0, rule);
    });
  };
  if (doc.constructor === File) {
    return clearance.check(doc, perm, req, function(err, result) {
      if (result) {
        return callback(true);
      } else {
        return checkAscendantVisible();
      }
    });
  } else {
    return checkAscendantVisible();
  }
};

mailsToSend = {};

timer = null;

_5min = 5000;

module.exports.notifyChanges = function(who, file, callback) {
  if (timer) {
    clearTimeout(timer);
  }
  return file.getParents(function(err, parents) {
    var folder, params, rule, uniq, _i, _j, _len, _len1, _ref, _ref1;
    if (err) {
      return callback(err);
    }
    for (_i = 0, _len = parents.length; _i < _len; _i++) {
      folder = parents[_i];
      if (!((_ref = folder.clearance) != null ? _ref.length : void 0)) {
        continue;
      }
      _ref1 = folder.clearance;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        rule = _ref1[_j];
        if (rule.email !== who && rule.notifications) {
          timer = setTimeout(doSendNotif, _5min);
          uniq = rule.key + folder.name;
          mailsToSend[uniq] = {
            name: folder.name,
            url: publicURL(folder) + '?key=' + rule.key,
            to: rule.email
          };
        }
      }
      if (who !== 'owner' && folder.changeNotification) {
        uniq = 'update' + folder.id;
        params = {
          text: localization.t('notification new file', {
            who: who,
            fileName: file.name,
            folderName: folder.name
          }),
          resource: {
            app: 'files',
            url: "#folder/" + folder.id
          }
        };
        notifications.createOrUpdatePersistent(uniq, params, function(err) {
          if (err) {
            return console.log(err);
          }
        });
      }
    }
    return callback(null);
  });
};

notiftemplate = localization.getEmailTemplate('notifmail.jade');

doSendNotif = function() {
  return User.getDisplayName(function(err, displayName) {
    var item, key, mailOptions;
    for (key in mailsToSend) {
      item = mailsToSend[key];
      mailOptions = {
        to: item.to,
        subject: localization.t('email change subject', {
          displayName: displayName,
          itemName: item.name
        }),
        content: item.url,
        html: notiftemplate({
          name: item.name,
          url: item.url,
          displayName: displayName,
          localization: localization
        })
      };
      CozyAdapter.sendMailFromUser(mailOptions, function(err) {
        console.log('sent update mail to ', item.to);
        if (err) {
          return console.log(err);
        }
      });
    }
    return mailsToSend = {};
  });
};
